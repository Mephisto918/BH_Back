// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum ImageType {
  PFP
  THUMBNAIL
  MAIN
  GALLERY
  BANNER
  FLOORPLAN
  DOCUMENT
  QR
  MAP
  ROOM
}

enum ImageQuality {
  LOW
  MEDIUM
  HIGH
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RoomType {
  SOLO
  DUO
  TRIO
  SQUAD
  FAMILY
}

enum UserRole {
  TENANT
  OWNER
  ADMIN
}

enum ResourceType {
  TENANT
  OWNER
  ADMIN
  BOARDING_HOUSE
  ROOM
}

enum PermitType {
  BIR // Bureau of Internal Revenue
  FIRE_CERTIFICATE // Fire Certificate
  MAYORS_PERMIT // Mayor's Permit
  DTI // Department of Trade and Industry
  BUSINESS_PERMIT // Business Permit
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  VERIFY
}

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma" // need more research on this
}

//* during vps
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  firstname    String
  lastname     String
  email        String
  password     String
  role         UserRole  @default(TENANT) // changed
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  age          Int       @default(0)
  guardian     String?
  address      String
  phone_number String
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  bookings     Booking[]
}

model Owner {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  firstname      String
  lastname       String
  email          String          @unique
  password       String
  role           UserRole        @default(OWNER)
  isActive       Boolean         @default(true)
  isVerified     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  age            Int             @default(0)
  address        String
  phone_number   String
  boardingHouses BoardingHouse[]
  isDeleted      Boolean         @default(false)
  deletedAt      DateTime?
  permits        Permit[] // permit relation
}

model Admin {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  firstname    String
  lastname     String
  email        String    @unique
  password     String
  role         UserRole  @default(ADMIN)
  isActive     Boolean   @default(true)
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  age          Int       @default(0)
  address      String
  phone_number String
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
}

model Permit {
  id              Int            @id @default(autoincrement())
  ownerId         Int
  type            PermitType
  fileUrl         String // Link to file or pathnp
  expiresAt       DateTime
  owner           Owner          @relation(fields: [ownerId], references: [id])
  isDeleted       Boolean        @default(false)
  deletedAt       DateTime?
  BoardingHouse   BoardingHouse? @relation(fields: [boardingHouseId], references: [id])
  boardingHouseId Int?
}

model BoardingHouse {
  id                 Int       @id @default(autoincrement())
  ownerId            Int
  owner              Owner     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name               String
  address            String?
  description        String?
  amenities          Json?
  availabilityStatus Boolean   @default(true)
  locationId         Int       @unique
  location           Location  @relation(fields: [locationId], references: [id], name: "BoardingHouseToLocation")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  isDeleted          Boolean   @default(false)
  deletedAt          DateTime?
  rooms              Room[]
  permits            Permit[]
}

model Location {
  id            Int                     @id @default(autoincrement())
  coordinates   Unsupported("geometry")
  city          String?
  province      String?
  country       String?
  boardingHouse BoardingHouse?          @relation(name: "BoardingHouseToLocation")
  isDeleted     Boolean                 @default(false)
  deletedAt     DateTime?
}

model Booking {
  id           Int           @id @default(autoincrement())
  tenantId     Int
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  roomId       Int
  room         Room          @relation(fields: [roomId], references: [id])
  dateBooked   DateTime
  checkInDate  DateTime
  checkOutDate DateTime
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeleted    Boolean       @default(false)
  deletedAt    DateTime?
}

model Room {
  id                  Int                   @id @default(autoincrement())
  boardingHouseId     Int
  boardingHouse       BoardingHouse         @relation(fields: [boardingHouseId], references: [id], onDelete: Cascade)
  roomNumber          String
  maxCapacity         Int                   @default(1)
  currentCapacity     Int                   @default(0)
  price               Decimal               @db.Decimal(10, 2)
  tags                Json?
  roomType            RoomType              @default(SOLO)
  availabilityStatus  Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  isDeleted           Boolean               @default(false)
  deletedAt           DateTime?
  bookings            Booking[]
  roomAvailabilityLog RoomAvailabilityLog[]
}

model RoomAvailabilityLog {
  id        Int      @id @default(autoincrement())
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  status    Boolean // true = available, false = locked/unavailable
  reason    String?
  createdAt DateTime @default(now())
}

model Image {
  id        Int          @id @default(autoincrement())
  url       String
  type      ImageType
  quality   ImageQuality @default(MEDIUM)
  createdAt DateTime     @default(now())

  // Polymorphic references
  entityType ResourceType
  entityId   Int
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    Int?
  user      Json
  action    AuditAction // e.g. "CREATE", "UPDATE", "DELETE", "LOGIN", etc.
  tableName String // e.g. "Tenant", "Booking"
  recordId  Int? // The ID of the record affected, nullable in case not applicable
  meta      Json? // Optional: store extra info (diff, payload, IP, etc.)
  createdAt DateTime    @default(now())
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
}

//* do this to change Json to JSONB
/**
 ALTER TABLE "BoardingHouse"
 ALTER COLUMN "amenities" TYPE jsonb USING "amenities"::jsonb;
 ALTER TABLE "BoardingHouse"
 ALTER COLUMN "properties" TYPE jsonb USING "properties"::jsonb;
 ALTER TABLE "Room"
 ALTER COLUMN "features" TYPE jsonb USING "features"::jsonb;
 ALTER TABLE "Room"
 ALTER COLUMN "tags" TYPE jsonb USING "tags"::jsonb;
 ALTER TABLE "AuditLog"
 ALTER COLUMN "meta" TYPE jsonb USING "meta"::jsonb;
 ALTER TABLE "AuditLog"
 ALTER COLUMN "user" TYPE jsonb USING "user"::jsonb;
 -- üßº Update NULLs to default values
 UPDATE "BoardingHouse"
 SET "amenities" = '[]'::jsonb
 WHERE "amenities" IS NULL;
 UPDATE "BoardingHouse"
 SET "properties" = '{}'::jsonb
 WHERE "properties" IS NULL;
 UPDATE "Room"
 SET "features" = '{}'::jsonb
 WHERE "features" IS NULL;
 UPDATE "Room"
 SET "tags" = '[]'::jsonb
 WHERE "tags" IS NULL;
 UPDATE "AuditLog"
 SET "meta" = '{}'::jsonb
 WHERE "meta" IS NULL;
 UPDATE "AuditLog"
 SET "user" = '{}'::jsonb
 WHERE "user" IS NULL;
 -- ‚ö° Add GIN indexes for JSONB fields
 CREATE INDEX gin_idx_boardinghouse_amenities ON "BoardingHouse" USING GIN ("amenities");
 CREATE INDEX gin_idx_boardinghouse_properties ON "BoardingHouse" USING GIN ("properties");
 CREATE INDEX gin_idx_room_features ON "Room" USING GIN ("features");
 CREATE INDEX gin_idx_room_tags ON "Room" USING GIN ("tags");
 CREATE INDEX gin_idx_auditlog_meta ON "AuditLog" USING GIN ("meta");
 CREATE INDEX gin_idx_auditlog_user ON "AuditLog" USING GIN ("user");
 -- add constraints for images, ‚ùó Reserved for future schema integrity
 ALTER TABLE "Image" ADD CONSTRAINT check_one_relation CHECK ("boardingHouseId" IS NOT NULL OR "roomId" IS NOT NULL OR "ownerId" IS NOT NULL OR "tenantId" IS NOT NULL OR "adminId" IS NOT NULL);
 */

//* for older data
// UPDATE "BoardingHouse"
// SET "amenities" = '[]'::jsonb
// WHERE "amenities" IS NULL;

// UPDATE "BoardingHouse"
// SET "properties" = '{}'::jsonb
// WHERE "properties" IS NULL;

//* do this to activate PostGis every after pushing rest
// CREATE EXTENSION postgis;
